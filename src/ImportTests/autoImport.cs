namespace TestDll{internal class PointerDelete{public IntPtr? Native;public PointerDelete(IntPtr? native){Native=native;}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_New_PointerDelete();public PointerDelete(){{Native=Wrappy_New_PointerDelete();}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_PointerDelete_Nothing(IntPtr self);public void Nothing(){{Wrappy_PointerDelete_Nothing(Native??IntPtr.Zero);}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern int Wrappy_PointerDelete_Nine(IntPtr self);public int Nine(){{var inner_result=Wrappy_PointerDelete_Nine(Native??IntPtr.Zero);return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern float Wrappy_PointerDelete_Half(IntPtr self,float arg_a);public float Half(float a){{var inner_result=Wrappy_PointerDelete_Half(Native??IntPtr.Zero,a);return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern double Wrappy_PointerDelete_Add(IntPtr self,int arg_l,double arg_r);public double Add(int l,double r){{var inner_result=Wrappy_PointerDelete_Add(Native??IntPtr.Zero,l,r);return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern int Wrappy_PointerDelete_Sum(IntPtr self,void* p_arg_n,int l_arg_n);unsafe public int Sum(Span<int> n){fixed(void*native_n=n){var inner_result=Wrappy_PointerDelete_Sum(Native??IntPtr.Zero,native_n,n.Length);return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_Delete_PointerDelete(IntPtr self);
~PointerDelete(){Wrappy_Delete_PointerDelete(Native??IntPtr.Zero);}
}}
namespace TestDll{internal class PointerDispose:IDisposable{public IntPtr? Native;public PointerDispose(IntPtr? native){Native=native;}
private readonly object Locker=new object();
public static HashSet<PointerDispose>Undisposed{get;}=new HashSet<PointerDispose>();
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_New_PointerDispose();public PointerDispose(){{Native=Wrappy_New_PointerDispose();lock(Undisposed)Undisposed.Add(this);}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern int Wrappy_PointerDispose_Five(IntPtr self);public int Five(){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");{var inner_result=Wrappy_PointerDispose_Five(Native??IntPtr.Zero);return inner_result;}}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_PointerDispose_ThisPointer(IntPtr self);public IntPtr ThisPointer(){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");{var inner_result=Wrappy_PointerDispose_ThisPointer(Native??IntPtr.Zero);return inner_result;}}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern int Wrappy_PointerDispose_PointerValue(IntPtr self,IntPtr arg_pointer);public int PointerValue(IntPtr pointer){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");{var inner_result=Wrappy_PointerDispose_PointerValue(Native??IntPtr.Zero,pointer);return inner_result;}}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern float Wrappy_PointerDispose_Sum(IntPtr self,void* arg_vec);unsafe public float Sum(System.Numerics.Vector3 vec){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");{var inner_result=Wrappy_PointerDispose_Sum(Native??IntPtr.Zero,&vec);return inner_result;}}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern void Wrappy_PointerDispose_Normalice(IntPtr self,void* p_arg_vecs,int l_arg_vecs);unsafe public void Normalice(Span<System.Numerics.Vector2> vecs){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");fixed(void*native_vecs=vecs){Wrappy_PointerDispose_Normalice(Native??IntPtr.Zero,native_vecs,vecs.Length);}}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern void Wrappy_PointerDispose_Transform(IntPtr self,void* p_arg_vecs,int l_arg_vecs,void* arg_transform);unsafe public void Transform(Span<System.Numerics.Vector4> vecs,System.Numerics.Matrix4x4 transform){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");fixed(void*native_vecs=vecs){Wrappy_PointerDispose_Transform(Native??IntPtr.Zero,native_vecs,vecs.Length,&transform);}}}
private delegate void OnFiveDelegate_Native();private OnFiveDelegate_Native? OnFiveDelegate_Native_Object;[System.Runtime.InteropServices.DllImport("TestDll",CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]private static extern void Wrappy_PointerDispose_SetEvent_OnFive(IntPtr self,OnFiveDelegate_Native? action);public delegate void OnFiveDelegate();private OnFiveDelegate? OnFiveDelegate_Object;public event OnFiveDelegate OnFive{add{if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");OnFiveDelegate_Object+=value;if(OnFiveDelegate_Native_Object==null){OnFiveDelegate_Native_Object=()=>{OnFiveDelegate_Object?.Invoke();};Wrappy_PointerDispose_SetEvent_OnFive(Native??IntPtr.Zero,OnFiveDelegate_Native_Object);}}}remove{OnFiveDelegate_Object-=value;}}
private void ClearDelegates(){if(!Native.HasValue)return;lock(Locker){if(!Native.HasValue)return;if(OnFiveDelegate_Native_Object!=null){Wrappy_PointerDispose_SetEvent_OnFive(Native??IntPtr.Zero,null);OnFiveDelegate_Native_Object=null;}}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_Delete_PointerDispose(IntPtr self);
public void Dispose(){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("PointerDispose");lock(Undisposed)Undisposed.Remove(this);ClearDelegates();Wrappy_Delete_PointerDispose(Native.Value);Native=null;}}
}}
namespace TestDll{internal class SharedAlive{public IntPtr? Native;public SharedAlive(IntPtr? native){Native=native;}
private readonly object Locker=new object();
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_New_SharedAlive(double arg_a);public SharedAlive(double a){{Native=Wrappy_New_SharedAlive(a);}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern int Wrappy_SharedAlive_Two(IntPtr self);public int Two(){{var inner_result=Wrappy_SharedAlive_Two(Native??IntPtr.Zero);return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_SharedAlive_MakeDispose(IntPtr self);public TestDll.PointerDispose? MakeDispose(){{var inner_result=new TestDll.PointerDispose((IntPtr?)Wrappy_SharedAlive_MakeDispose(Native??IntPtr.Zero));return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_SharedAlive_MakePrint(IntPtr self,int arg_i);public TestDll.SharedAll? MakePrint(int i){{var inner_result=new TestDll.SharedAll((IntPtr?)Wrappy_SharedAlive_MakePrint(Native??IntPtr.Zero,i));return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_SharedAlive_PrintTwice(IntPtr self,IntPtr arg_printer);public void PrintTwice(TestDll.SharedAll? printer){{Wrappy_SharedAlive_PrintTwice(Native??IntPtr.Zero,printer?.Native??IntPtr.Zero);}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern double Wrappy_SharedAlive_HalfNine(IntPtr self,IntPtr arg_pdelete);public double HalfNine(TestDll.PointerDelete? pdelete){{var inner_result=Wrappy_SharedAlive_HalfNine(Native??IntPtr.Zero,pdelete?.Native??IntPtr.Zero);return inner_result;}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern void Wrappy_SharedAlive_FillWithDispose(IntPtr self,void* p_arg_disposes,int l_arg_disposes);unsafe public void FillWithDispose(Span<TestDll.PointerDispose?> disposes){{IntPtr*native_disposes=stackalloc IntPtr[disposes.Length];for(var i=0;i<disposes.Length;i++)native_disposes[i]=disposes[i]?.Native??IntPtr.Zero;Wrappy_SharedAlive_FillWithDispose(Native??IntPtr.Zero,native_disposes,disposes.Length);for(var i=0;i<disposes.Length;i++)if(native_disposes[i]==IntPtr.Zero)disposes[i]=null;else{if(native_disposes[i]!=disposes[i]?.Native)disposes[i]=new PointerDispose((IntPtr?)native_disposes[i]);}}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern void Wrappy_SharedAlive_FillWithPrint(IntPtr self,void* p_arg_printers,int l_arg_printers);unsafe public void FillWithPrint(Span<TestDll.SharedAll?> printers){{IntPtr*native_printers=stackalloc IntPtr[printers.Length];for(var i=0;i<printers.Length;i++)native_printers[i]=printers[i]?.Native??IntPtr.Zero;Wrappy_SharedAlive_FillWithPrint(Native??IntPtr.Zero,native_printers,printers.Length);for(var i=0;i<printers.Length;i++)if(native_printers[i]==IntPtr.Zero)printers[i]=null;else{if(native_printers[i]!=printers[i]?.Native)printers[i]=new SharedAll((IntPtr?)native_printers[i]);}}}
private delegate int TwoCallbackDelegate_Native(int arg_two);private TwoCallbackDelegate_Native? TwoCallbackDelegate_Native_Object;[System.Runtime.InteropServices.DllImport("TestDll",CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]private static extern void Wrappy_SharedAlive_SetEvent_TwoCallback(IntPtr self,TwoCallbackDelegate_Native? action);public delegate int TwoCallbackDelegate(int two);private TwoCallbackDelegate? TwoCallbackDelegate_Object;public event TwoCallbackDelegate TwoCallback{add{lock(Locker){TwoCallbackDelegate_Object+=value;if(TwoCallbackDelegate_Native_Object==null){TwoCallbackDelegate_Native_Object=(two)=>{return TwoCallbackDelegate_Object?.Invoke(two)??default;};Wrappy_SharedAlive_SetEvent_TwoCallback(Native??IntPtr.Zero,TwoCallbackDelegate_Native_Object);}}}remove{TwoCallbackDelegate_Object-=value;}}
private delegate IntPtr MakeDisposeCallbackDelegate_Native(IntPtr arg_dispose);private MakeDisposeCallbackDelegate_Native? MakeDisposeCallbackDelegate_Native_Object;[System.Runtime.InteropServices.DllImport("TestDll",CallingConvention=System.Runtime.InteropServices.CallingConvention.StdCall)]private static extern void Wrappy_SharedAlive_SetEvent_MakeDisposeCallback(IntPtr self,MakeDisposeCallbackDelegate_Native? action);public delegate TestDll.PointerDispose? MakeDisposeCallbackDelegate(TestDll.PointerDispose? dispose);private MakeDisposeCallbackDelegate? MakeDisposeCallbackDelegate_Object;public event MakeDisposeCallbackDelegate MakeDisposeCallback{add{lock(Locker){MakeDisposeCallbackDelegate_Object+=value;if(MakeDisposeCallbackDelegate_Native_Object==null){MakeDisposeCallbackDelegate_Native_Object=(dispose)=>{return MakeDisposeCallbackDelegate_Object?.Invoke(dispose==IntPtr.Zero?null:new TestDll.PointerDispose((IntPtr?)dispose))?.Native??IntPtr.Zero;};Wrappy_SharedAlive_SetEvent_MakeDisposeCallback(Native??IntPtr.Zero,MakeDisposeCallbackDelegate_Native_Object);}}}remove{MakeDisposeCallbackDelegate_Object-=value;}}
private void ClearDelegates(){if(!Native.HasValue)return;lock(Locker){if(!Native.HasValue)return;if(TwoCallbackDelegate_Native_Object!=null){Wrappy_SharedAlive_SetEvent_TwoCallback(Native??IntPtr.Zero,null);TwoCallbackDelegate_Native_Object=null;}if(MakeDisposeCallbackDelegate_Native_Object!=null){Wrappy_SharedAlive_SetEvent_MakeDisposeCallback(Native??IntPtr.Zero,null);MakeDisposeCallbackDelegate_Native_Object=null;}}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_Delete_SharedAlive(IntPtr self);
~SharedAlive(){ClearDelegates();Wrappy_Delete_SharedAlive(Native??IntPtr.Zero);}
}}
namespace TestDll{internal class SharedAll:IDisposable{public IntPtr? Native;public SharedAll(IntPtr? native){Native=native;}
private readonly object Locker=new object();
public bool Owner=true;
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern IntPtr Wrappy_New_SharedAll(int arg_i);public SharedAll(int i){{Native=Wrappy_New_SharedAll(i);}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_SharedAll_Print(IntPtr self);public void Print(){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");{Wrappy_SharedAll_Print(Native??IntPtr.Zero);}}}
[System.Runtime.InteropServices.DllImport("TestDll")]unsafe private static extern void Wrappy_SharedAll_Write(IntPtr self,void* p_arg_l,int l_arg_l);unsafe public void Write(Span<byte> l){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");fixed(void*native_l=l){Wrappy_SharedAll_Write(Native??IntPtr.Zero,native_l,l.Length);}}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_SharedAll_WriteString(IntPtr self,string arg_s);public void WriteString(string s){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");{Wrappy_SharedAll_WriteString(Native??IntPtr.Zero,s);}}}
[System.Runtime.InteropServices.DllImport("TestDll")]private static extern void Wrappy_Delete_SharedAll(IntPtr self);
public void Dispose(){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");lock(Locker){if(!Native.HasValue)throw new ObjectDisposedException("SharedAll");if(Owner){Wrappy_Delete_SharedAll(Native.Value);Native=null;}}}
~SharedAll(){if(Native.HasValue&&Owner)Wrappy_Delete_SharedAll(Native.Value);}
}}
